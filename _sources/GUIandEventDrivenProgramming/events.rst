..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: list-1-
   :start: 1

Event Processing
================

In the previous lessons you learned how to create widgets and use a layout
manager to size and position them in a window. Now it is time to learn how
to process user events on those widgets.

Events
======

An event represents an action that needs to be processed. Events can be
caused by a user, such as clicking in a window or typing on the keyboard.
Events can also be generated by software, such as a request to redraw the
application's window after changes have been made. In a GUI program,
all processing is done by responding to events.

Events are defined as strings using a pre-defined syntax. The general format
of an event description is ``<modifier-type-detail>``, where the ``modifier``
and ``detail`` portions are optional. For example, a ``<Button>`` event is
generated on any change of state of any mouse button, while a ``<Shift-Button>``
event will only be generated if the mouse state changes while the SHIFT key
on the keyboard is down. And a <Shift-Button-1> event will only be generated
if the left mouse button (associated with the number 1) changes state.
Below is a list of the most widely used events along with a brief description
of each one. You can add or remove ``modifier`` and ``detail`` values to make
events more or less specific.

=============================  ====================================================================
Pointer Related Events         Description
=============================  ====================================================================
``"<ButtonPress-1>"``          The left mouse button was pressed.
``"<ButtonPress-2>"``          The middle mouse button was pressed.
``"<ButtonPress-3>"``          The right mouse button was pressed.
``"<B1-Motion>"``              With the left mouse button held down, the mouse changed location.
``"<B2-Motion>"``              With the middle mouse button held down, the mouse changed location.
``"<B3-Motion>"``              With the right mouse button held down, the mouse changed location.
``"<ButtonRelease-1>"``        The left mouse button was released.
``"<Double-Button-1>"``        The left mouse button was double-clicked.
``"<Enter>"``                  The mouse pointer just became over a particular widget.
``"<Leave>"``                  The mouse pointer is no longer over a particular widget.
``"<FocusIn>"``                A widget just received the keyboard focus.
``"<FocusOut>"``               A widget just lost the keyboard focus.
``"<Configure>"``              A widget just changed its size or position.
=============================  ====================================================================

=============================  ====================================================================
Keyboard Related Events        Description
=============================  ====================================================================
``"<Key>"``                    The user pressed any key on the keyboard.
``"<Return>"``                 The user pressed the Enter key.
``"<Backspace>"``              The user pressed the Backspace key.
``"<Tab>"``                    The user pressed the Tab key.
``"<Escape>"``                 The user pressed the Escape key.
``"<Prior>"``                  The user pressed the Page-up key.
``"<Next>"``                   The user pressed the Page-down key.
``"<Up>"``                     The user pressed the up arrow key.
``"<Down>"``                   The user pressed the down arrow key.
``"<Left>"``                   The user pressed the left arrow key.
``"<Right>"``                  The user pressed the right arrow key.
``"<F1>"``                     The user pressed the F1 key.
``"<F2>"``                     The user pressed the F2 key.
``"<a>"``                      The user pressed the "a" key.
``"<b>"``                      The user pressed the "b" key.
``"<c>"``                      The user pressed the "c" key.
``"<Shift-Up>"``               The user pressed the up arrow key while the shift key was down.
``"<Alt-Up>"``                 The user pressed the up arrow key while the alt key was down.
``"<Control-Up>"``             The user pressed the up arrow key while the control key was down
etc...
=============================  ====================================================================

Event Objects
=============

When a user generates an event, or the software generates an event, an event
object is created. This object is automatically passed to the function that
is registered to handle the event. Therefore, every event handler function
must be defined to receive one parameter, an event object.

An event object contains the following attributes.

=======================  ====================================================================
Event Object Attribute   Description
=======================  ====================================================================
``.widget``              The widget which generated this event. This is a reference to a
                         ``Tkinter`` widget instance; it is not a string name.
``.x``, ``.y``           The current mouse position, relative to the application's window, in pixels.
``.x_root``, ``.y_root`` The current mouse position relative to the upper left corner of the
                         screen, in pixels.
``.char``                For keyboard events only, this is the character code of the key
                         pressed or released as a string.
``.keysym``              For keyboard events only, the key symbol.
``.keycode``             For keyboard events only, the key code (i.e., the key's Unicode
                         decimal value).
``.num``                 For mouse button events only, the button number.

``.width``, ``.height``  For configure events only, the new size of the widget, in pixels.
=======================  ====================================================================

A typical event handler will use the values in the event object it receives
to perform an appropriate action related to the event. For example,

.. code-block:: python

  def process_event(event):
    if event.x > 10 and event.y > 20:
      # do something

Event Processing
================

The operating system generates events in the order the user or the program
creates them. An application's GUI event loop receives the events in this
same order and then calls the appropriate event handler. Therefore,
events are processed in the same order they are created.

Note that events can't be processed unless the application's GUI event loop
is running. If an individual event handler takes a long time to process an
event, other events will get "queued up" waiting for a chance to be processed.
It is considered bad GUI programming for any event handler to take
up too much processing time. An event handler should do as little processing
as possible to accomplish its intended task and then quit. This returns
control of the application back to the event loop.

Events are always associated with a widget. If you want to know every event
that happens inside an application's window, then bind events to the widget
that is your application's window. If you only want to know about button
click events on a particular button, then bind an event handler to that
specific button. In general, events should be made as specific as possible.

Some widgets, such as a Notebook that implements a tabbed set of frames, have
predefined events that are used to manipulate them. These are called "bind_class"
event bindings and they bind certain events to all instances of a particular
widget type. In general you should not modify or change these types of
event bindings because a user expects a certain behaviour from a particular
type of widget and changing that behaviour can make the entire user interface
confusing.



.. index:: event, event description, event object

